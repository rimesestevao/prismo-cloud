# .gitea/workflows/deploy.yml
name: Atualizar e Iniciar Aplicação

on:
  push:
    branches:
      - main

jobs:
  update-and-start:
    runs-on: docker-arch
    container:
      image: node:20
    steps:
      - name: Diagnóstico do ambiente
        run: |
          echo "=== Informações do Sistema ==="
          uname -a
          cat /etc/*release* 2>/dev/null || echo "Informações de release não disponíveis"
          echo
          
          echo "=== Diretório de trabalho atual ==="
          pwd
          ls -la
          echo
          
          echo "=== Ferramentas disponíveis ==="
          echo "Node.js: $(command -v node || echo 'não instalado')"
          [ -x "$(command -v node)" ] && node --version
          
          echo "NPM: $(command -v npm || echo 'não instalado')"
          [ -x "$(command -v npm)" ] && npm --version
          
          echo "Git: $(command -v git || echo 'não instalado')"
          [ -x "$(command -v git)" ] && git --version
          
          echo "Docker: $(command -v docker || echo 'não instalado')"
          [ -x "$(command -v docker)" ] && docker --version
          
          echo "Docker Compose: $(command -v docker-compose || echo 'verifique docker compose')"
          [ -x "$(command -v docker-compose)" ] && docker-compose --version
          [ -x "$(command -v docker)" ] && docker compose version 2>/dev/null
          
          echo "PM2: $(command -v pm2 || echo 'não instalado')"
          [ -x "$(command -v pm2)" ] && pm2 --version
          
          echo "Python: $(command -v python || echo 'não instalado') / $(command -v python3 || echo 'não instalado')"
          [ -x "$(command -v python)" ] && python --version
          [ -x "$(command -v python3)" ] && python3 --version
          
          echo
          echo "=== Variáveis de ambiente ==="
          env | grep -v -E 'PASSWORD|SECRET|TOKEN|KEY' || echo "Nenhuma variável de ambiente disponível"

      - name: Verificar instalação do Node.js
        run: |
          if ! command -v node &> /dev/null; then
            echo "Node.js não encontrado, verifique se está instalado no runner"
            exit 1
          else
            echo "Node.js encontrado: $(node --version)"
          fi
          
          if ! command -v npm &> /dev/null; then
            echo "NPM não encontrado, verifique se está instalado no runner"
            exit 1
          else
            echo "NPM encontrado: $(npm --version)"
          fi
          
      - name: Verificar instalação do Docker
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker não encontrado, verifique se está instalado no runner"
            exit 1
          else
            echo "Docker encontrado: $(docker --version)"
          fi
          
          if ! command -v docker-compose &> /dev/null && ! command -v docker &> /dev/null compose; then
            echo "Docker Compose não encontrado, verifique se está instalado no runner"
            exit 1
          else
            echo "Docker Compose encontrado"
          fi
          
      - name: Instalar dependências
        run: |
          echo "Instalando dependências do Node.js..."
          npm install
          echo "✅ Dependências instaladas com sucesso!"

      - name: Gerar build da aplicação
        run: |
          echo "Gerando build da aplicação..."
          npm run build
          echo "✅ Build concluído com sucesso!"

      - name: Iniciar containers com Docker Compose
        run: |
          echo "Iniciando containers com Docker Compose..."
          docker compose down || true
          docker compose up -d
          echo "✅ Containers iniciados em segundo plano!"
          
      - name: Executar migração do Prisma
        run: |
          echo "Executando migração do Prisma..."
          npx prisma migrate deploy
          echo "✅ Migração concluída com sucesso!"

      - name: Criar arquivo de variáveis de ambiente
        run: |
          echo "Criando arquivo .env..."
          echo "PORT=3000" > .env
          echo "MONGODB_URI=mongodb://localhost:27017/prismo" >> .env
          echo "DATABASE_URL=postgresql://user:password@localhost:5432/prismo" >> .env
          echo "✅ Arquivo .env criado com sucesso!"

      - name: Iniciar aplicação
        run: |
          echo "Iniciando aplicação com pm2..."
          npm install -g pm2
          pm2 delete prismo-cloud || true
          pm2 start dist/app.js --name prismo-cloud
          echo "✅ Aplicação iniciada em segundo plano!"

      - name: Verificar status da aplicação
        run: |
          echo "Aguardando inicialização da aplicação..."
          sleep 10
          pm2 status
          if pm2 show prismo-cloud | grep -q "online"; then
            echo "✅ Aplicação iniciada com sucesso!"
          else
            echo "⚠️ Verificar logs da aplicação para possíveis erros"
            pm2 logs prismo-cloud --lines 20
            exit 1
          fi